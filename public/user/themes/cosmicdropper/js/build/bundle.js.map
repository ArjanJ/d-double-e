{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/src/header.js","js/src/home.js","js/src/index.js","js/src/utils.js","node_modules/vivus/dist/vivus.js"],"names":[],"mappings":"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":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { $, $$ } from './utils';\n\nconst header = ((window, document, undefined) => {\n\tconst components = {\n\t\theader: $('header.site-header'),\n\t\tnav: $('nav.site-nav')\n\t};\n\n\tconst cssClasses = {\n\t\theaderActive: 'site-header--scrolled',\n\t\tnavActive: 'site-nav--scrolled'\n\t};\n\n\tconst scrollTarget = (window.innerHeight) - (300);\n\n\tconst init = () => {\n\t\twindow.addEventListener('scroll', handleScroll);\n\t};\n\n\tconst handleScroll = () => {\n\t\tconst scrolled = window.pageYOffset;\n\t\tconst { header, nav } = components;\n\t\tconst { headerActive, navActive } = cssClasses;\n\n\t\tif (scrolled >= scrollTarget && !(header.classList.contains(headerActive))) {\n\t\t\theader.classList.add(headerActive);\n\t\t\tnav.classList.add(navActive);\n\t\t}\n\n\t\tif (scrolled < scrollTarget && header.classList.contains(headerActive)) {\n\t\t\theader.classList.remove(headerActive);\n\t\t\tnav.classList.remove(navActive);\n\t\t}\n\t};\n\n\treturn {\n\t\tinit\n\t};\n})(window, document);\n\nexport default header;\n","import { $, $$, isVisible, imageLoaded, debounce } from './utils';\nimport Vivus from 'vivus';\n\nconst introAnimations = (() => {\n\tconst components = {\n\t\t// graphic: $('.home-hero__img-img'),\n\t\tgraphicSrc: '/images/home-bg-1.jpg',\n\t\t// backgroundSVG: $('.home-hero__bg'),\n\t\t// backgroundCamo: $('.home-hero__bg--camo'),\n\t\tlogoSVG: $('#header-logo'),\n\t\tmusicCover: $('.home-hero__music-img'),\n\t\t// logoSVG2: $('#homeLogo2'),\n\t\t// logoSVGContainer: $('.home-hero__svgs'),\n\t\theader: $('header.site-header'),\n\t\tspotifyBtn: $('.home-hero__spotify'),\n\t\toverlay: $('.site-header__overlay')\n\t\t// paintDrips: $('.home-hero__paint-drips')\n\t};\n\n\tconst cssClasses = {\n\t\tgraphicActive: 'home-hero__img-img--active',\n\t\tbackgroundSVGActive: 'home-hero__bg--active',\n\t\tlogoSVGActive: 'active',\n\t\tlogoSVGContainerActive: 'home-hero__svgs--active',\n\t\theaderActive: 'site-header--active',\n\t\tspotifyBtnActive: 'home-hero__spotify--active',\n\t\tpaintDripsActive: 'home-hero__paint-drips--show',\n\t\toverlayHide: 'site-header__overlay--hide',\n\t\tmusicCoverLoaded: 'home-hero__music-img--loaded'\n\t};\n\n\tlet graphicLoaded = false;\n\n\tconst onGraphicLoadSuccess = () => {\n\t\tgraphicLoaded = true;\n\t};\n\n\tconst onGraphicLoadFail = () => {\n\t\tconsole.error('Graphic failed to load.');\n\t};\n\n\tconst loadGraphic = () => {\n\t\timageLoaded(components.graphicSrc, onGraphicLoadSuccess, onGraphicLoadFail);\n\t};\n\n\tconst logoSVGAnimationComplete = () => {\n\t\t// const {\n\t\t// \tgraphic,\n\t\t// \tbackgroundSVG,\n\t\t// \tbackgroundCamo,\n\t\t// \tlogoSVG,\n\t\t// \tlogoSVG2,\n\t\t// \tlogoSVGContainer,\n\t\t// \theader,\n\t\t// \tspotifyBtn,\n\t\t// \tpaintDrips\n\t\t// } = components;\n\n\t\t// const {\n\t\t// \tgraphicActive,\n\t\t// \tbackgroundSVGActive,\n\t\t// \tlogoSVGActive,\n\t\t// \tlogoSVGContainerActive,\n\t\t// \theaderActive,\n\t\t// \tspotifyBtnActive,\n\t\t// \tpaintDripsActive\n\t\t// } = cssClasses;\n\n\t\tif (graphicLoaded) {\n\t\t\tcomponents.logoSVG.classList.add('loaded');\n\t\t\tcomponents.logoSVG.removeAttribute('style');\n\t\t\tcomponents.overlay.classList.add(cssClasses.overlayHide);\n\t\t\tcomponents.musicCover.classList.add(cssClasses.musicCoverLoaded);\n\t\t\t// graphic.classList.add(graphicActive);\n\t\t\t// backgroundSVG.classList.add(backgroundSVGActive);\n\t\t\t// backgroundCamo.classList.add(backgroundSVGActive);\n\t\t\t// logoSVGContainer.classList.add(logoSVGContainerActive);\n\t\t\t// logoSVG.classList.add(logoSVGActive);\n\t\t\t// logoSVG2.classList.add(logoSVGActive);\n\t\t\t// header.classList.add(headerActive);\n\t\t\t// spotifyBtn.classList.add(spotifyBtnActive);\n\t\t\t// paintDrips.classList.add(paintDripsActive);\n\t\t} else {\n\t\t\tsetTimeout(logoSVGAnimationComplete, 500);\n\t\t}\n\t};\n\n\tconst logoSVGAnimation = () => {\n\t\tnew Vivus(components.logoSVG.id, {\n\t\t\tduration: 250,\n\t\t\ttype: 'async',\n\t\t\tanimTimingFunction: Vivus.EASE_OUT\n\t\t}, () => {\n\t\t\tlogoSVGAnimationComplete();\n\t\t});\n\t};\n\n\tconst positionLogo = () => {\n\t\tconst ww = window.innerWidth;\n\t\tconst wh = window.innerHeight;\n\t\tconst { logoSVG } = components;\n\t\tconst logoSVGOffset = logoSVG.getBoundingClientRect();\n\n\t\tconst translateX = Math.round(Math.abs((logoSVGOffset.left + logoSVGOffset.width / 2) - ww / 2));\n\t\tconst translateY = Math.round(Math.abs((logoSVGOffset.top + logoSVGOffset.height / 2) - wh / 2));\n\n\t\tlogoSVG.style.opacity = '1';\n\t\tlogoSVG.style.transform = `translate(${translateX}px, ${translateY}px)`;\n\t}\n\n\tconst init = () => {\n\t\tlogoSVGAnimation();\n\t\tloadGraphic();\n\t\tpositionLogo();\n\t};\n\n\treturn {\n\t\tinit\n\t};\n})();\n\nconst animatePaintDrips = (() => {\n\tconst components = {\n\t\tpaths: $$('#paint-drips path')\n\t};\n\n\tconst cssClasses = {\n\t\tpathActive: 'path-active'\n\t};\n\n\tconst animatePaths = () => {\n\t\tconst { paths } = components;\n\t\tconst { pathActive } = cssClasses;\n\t\tconst scrolled = window.pageYOffset;\n\n\t\tif (scrolled > 150 && !paths[0].classList.contains(pathActive)) {\n\t\t\tpaths.forEach((path) => {\n\t\t\t\tpath.classList.add(pathActive);\n\t\t\t});\n\n\t\t\twindow.removeEventListener('scroll', debounce(animatePaths, 10));\n\t\t}\n\t};\n\n\tconst init = () => {\n\t\twindow.addEventListener('scroll', debounce(animatePaths, 10));\n\t};\n\n\treturn {\n\t\tinit\n\t};\n})();\n\nconst home = (() => {\n\tconst init = () => {\n\t\t// animatePaintDrips.init();\n\t\tintroAnimations.init();\n\t};\n\n\treturn {\n\t\tinit\n\t};\n})();\n\nexport default home;\n","import header from './header';\nimport home from './home';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\theader.init();\n\thome.init();\n});\n","export function $(query) {\n\treturn document.querySelector(query);\n}\n\nexport function $$(query) {\n\treturn Array.from(document.querySelectorAll(query));\n}\n\nexport function isVisible(element, offset = 0) {\n\tconst elementOffset = element.getBoundingClientRect();\n\tconst wh = window.innerHeight;\n\tconst topVis = (elementOffset.top >= 0 && elementOffset.top < wh - offset);\n\tconst bottomVis = (elementOffset.bottom > 0 && elementOffset.bottom <= wh - offset);\n\n\tif (topVis || bottomVis) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nexport function imageLoaded(src, success, failed) {\n\tconst image = new Image();\n\timage.src = src;\n\n\timage.onload = () => success(image);\n\n\timage.onerror = (error) => failed(error);\n}\n\nexport function debounce(func, wait, immediate) {\n\tvar timeout;\n\treturn function() {\n\t\tvar context = this, args = arguments;\n\t\tvar later = function() {\n\t\t\ttimeout = null;\n\t\t\tif (!immediate) func.apply(context, args);\n\t\t};\n\t\tvar callNow = immediate && !timeout;\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(later, wait);\n\t\tif (callNow) func.apply(context, args);\n\t};\n}\n","/**\n * vivus - JavaScript library to make drawing animation on SVG\n * @version v0.3.0\n * @link https://github.com/maxwellito/vivus\n * @license MIT\n */\n\n'use strict';\n\n(function (window, document) {\n\n  'use strict';\n\n/**\n * Pathformer\n * Beta version\n *\n * Take any SVG version 1.1 and transform\n * child elements to 'path' elements\n *\n * This code is purely forked from\n * https://github.com/Waest/SVGPathConverter\n */\n\n/**\n * Class constructor\n *\n * @param {DOM|String} element Dom element of the SVG or id of it\n */\nfunction Pathformer(element) {\n  // Test params\n  if (typeof element === 'undefined') {\n    throw new Error('Pathformer [constructor]: \"element\" parameter is required');\n  }\n\n  // Set the element\n  if (element.constructor === String) {\n    element = document.getElementById(element);\n    if (!element) {\n      throw new Error('Pathformer [constructor]: \"element\" parameter is not related to an existing ID');\n    }\n  }\n  if (element.constructor instanceof window.SVGElement || /^svg$/i.test(element.nodeName)) {\n    this.el = element;\n  } else {\n    throw new Error('Pathformer [constructor]: \"element\" parameter must be a string or a SVGelement');\n  }\n\n  // Start\n  this.scan(element);\n}\n\n/**\n * List of tags which can be transformed\n * to path elements\n *\n * @type {Array}\n */\nPathformer.prototype.TYPES = ['line', 'ellipse', 'circle', 'polygon', 'polyline', 'rect'];\n\n/**\n * List of attribute names which contain\n * data. This array list them to check if\n * they contain bad values, like percentage. \n *\n * @type {Array}\n */\nPathformer.prototype.ATTR_WATCH = ['cx', 'cy', 'points', 'r', 'rx', 'ry', 'x', 'x1', 'x2', 'y', 'y1', 'y2'];\n\n/**\n * Finds the elements compatible for transform\n * and apply the liked method\n *\n * @param  {object} options Object from the constructor\n */\nPathformer.prototype.scan = function (svg) {\n  var fn, element, pathData, pathDom,\n    elements = svg.querySelectorAll(this.TYPES.join(','));\n  for (var i = 0; i < elements.length; i++) {\n    element = elements[i];\n    fn = this[element.tagName.toLowerCase() + 'ToPath'];\n    pathData = fn(this.parseAttr(element.attributes));\n    pathDom = this.pathMaker(element, pathData);\n    element.parentNode.replaceChild(pathDom, element);\n  }\n};\n\n\n/**\n * Read `line` element to extract and transform\n * data, to make it ready for a `path` object.\n *\n * @param  {DOMelement} element Line element to transform\n * @return {object}             Data for a `path` element\n */\nPathformer.prototype.lineToPath = function (element) {\n  var newElement = {};\n  newElement.d = 'M' + element.x1 + ',' + element.y1 + 'L' + element.x2 + ',' + element.y2;\n  return newElement;\n};\n\n/**\n * Read `rect` element to extract and transform\n * data, to make it ready for a `path` object.\n * The radius-border is not taken in charge yet.\n * (your help is more than welcomed)\n *\n * @param  {DOMelement} element Rect element to transform\n * @return {object}             Data for a `path` element\n */\nPathformer.prototype.rectToPath = function (element) {\n  var newElement = {},\n    x = parseFloat(element.x) || 0,\n    y = parseFloat(element.y) || 0,\n    width = parseFloat(element.width) || 0,\n    height = parseFloat(element.height) || 0;\n  newElement.d  = 'M' + x + ' ' + y + ' ';\n  newElement.d += 'L' + (x + width) + ' ' + y + ' ';\n  newElement.d += 'L' + (x + width) + ' ' + (y + height) + ' ';\n  newElement.d += 'L' + x + ' ' + (y + height) + ' Z';\n  return newElement;\n};\n\n/**\n * Read `polyline` element to extract and transform\n * data, to make it ready for a `path` object.\n *\n * @param  {DOMelement} element Polyline element to transform\n * @return {object}             Data for a `path` element\n */\nPathformer.prototype.polylineToPath = function (element) {\n  var i, path;\n  var newElement = {};\n  var points = element.points.trim().split(' ');\n  \n  // Reformatting if points are defined without commas\n  if (element.points.indexOf(',') === -1) {\n    var formattedPoints = [];\n    for (i = 0; i < points.length; i+=2) {\n      formattedPoints.push(points[i] + ',' + points[i+1]);\n    }\n    points = formattedPoints;\n  }\n\n  // Generate the path.d value\n  path = 'M' + points[0];\n  for(i = 1; i < points.length; i++) {\n    if (points[i].indexOf(',') !== -1) {\n      path += 'L' + points[i];\n    }\n  }\n  newElement.d = path;\n  return newElement;\n};\n\n/**\n * Read `polygon` element to extract and transform\n * data, to make it ready for a `path` object.\n * This method rely on polylineToPath, because the\n * logic is similar. The path created is just closed,\n * so it needs an 'Z' at the end.\n *\n * @param  {DOMelement} element Polygon element to transform\n * @return {object}             Data for a `path` element\n */\nPathformer.prototype.polygonToPath = function (element) {\n  var newElement = Pathformer.prototype.polylineToPath(element);\n  newElement.d += 'Z';\n  return newElement;\n};\n\n/**\n * Read `ellipse` element to extract and transform\n * data, to make it ready for a `path` object.\n *\n * @param  {DOMelement} element ellipse element to transform\n * @return {object}             Data for a `path` element\n */\nPathformer.prototype.ellipseToPath = function (element) {\n  var startX = element.cx - element.rx,\n      startY = element.cy;\n  var endX = parseFloat(element.cx) + parseFloat(element.rx),\n      endY = element.cy;\n\n  var newElement = {};\n  newElement.d = 'M' + startX + ',' + startY +\n                 'A' + element.rx + ',' + element.ry + ' 0,1,1 ' + endX + ',' + endY +\n                 'A' + element.rx + ',' + element.ry + ' 0,1,1 ' + startX + ',' + endY;\n  return newElement;\n};\n\n/**\n * Read `circle` element to extract and transform\n * data, to make it ready for a `path` object.\n *\n * @param  {DOMelement} element Circle element to transform\n * @return {object}             Data for a `path` element\n */\nPathformer.prototype.circleToPath = function (element) {\n  var newElement = {};\n  var startX = element.cx - element.r,\n      startY = element.cy;\n  var endX = parseFloat(element.cx) + parseFloat(element.r),\n      endY = element.cy;\n  newElement.d =  'M' + startX + ',' + startY +\n                  'A' + element.r + ',' + element.r + ' 0,1,1 ' + endX + ',' + endY +\n                  'A' + element.r + ',' + element.r + ' 0,1,1 ' + startX + ',' + endY;\n  return newElement;\n};\n\n/**\n * Create `path` elements form original element\n * and prepared objects\n *\n * @param  {DOMelement} element  Original element to transform\n * @param  {object} pathData     Path data (from `toPath` methods)\n * @return {DOMelement}          Path element\n */\nPathformer.prototype.pathMaker = function (element, pathData) {\n  var i, attr, pathTag = document.createElementNS('http://www.w3.org/2000/svg','path');\n  for(i = 0; i < element.attributes.length; i++) {\n    attr = element.attributes[i];\n    if (this.ATTR_WATCH.indexOf(attr.name) === -1) {\n      pathTag.setAttribute(attr.name, attr.value);\n    }\n  }\n  for(i in pathData) {\n    pathTag.setAttribute(i, pathData[i]);\n  }\n  return pathTag;\n};\n\n/**\n * Parse attributes of a DOM element to\n * get an object of attribute => value\n *\n * @param  {NamedNodeMap} attributes Attributes object from DOM element to parse\n * @return {object}                  Object of attributes\n */\nPathformer.prototype.parseAttr = function (element) {\n  var attr, output = {};\n  for (var i = 0; i < element.length; i++) {\n    attr = element[i];\n    // Check if no data attribute contains '%', or the transformation is impossible\n    if (this.ATTR_WATCH.indexOf(attr.name) !== -1 && attr.value.indexOf('%') !== -1) {\n      throw new Error('Pathformer [parseAttr]: a SVG shape got values in percentage. This cannot be transformed into \\'path\\' tags. Please use \\'viewBox\\'.');\n    }\n    output[attr.name] = attr.value;\n  }\n  return output;\n};\n\n  'use strict';\n\nvar requestAnimFrame, cancelAnimFrame, parsePositiveInt;\n\n/**\n * Vivus\n * Beta version\n *\n * Take any SVG and make the animation\n * to give give the impression of live drawing\n *\n * This in more than just inspired from codrops\n * At that point, it's a pure fork.\n */\n\n/**\n * Class constructor\n * option structure\n *   type: 'delayed'|'async'|'oneByOne'|'script' (to know if the item must be drawn asynchronously or not, default: delayed)\n *   duration: <int> (in frames)\n *   start: 'inViewport'|'manual'|'autostart' (start automatically the animation, default: inViewport)\n *   delay: <int> (delay between the drawing of first and last path)\n *   dashGap <integer> whitespace extra margin between dashes\n *   pathTimingFunction <function> timing animation function for each path element of the SVG\n *   animTimingFunction <function> timing animation function for the complete SVG\n *   forceRender <boolean> force the browser to re-render all updated path items\n *   selfDestroy <boolean> removes all extra styling on the SVG, and leaves it as original\n *\n * The attribute 'type' is by default on 'delayed'.\n *  - 'delayed'\n *    all paths are draw at the same time but with a\n *    little delay between them before start\n *  - 'async'\n *    all path are start and finish at the same time\n *  - 'oneByOne'\n *    only one path is draw at the time\n *    the end of the first one will trigger the draw\n *    of the next one\n *\n * All these values can be overwritten individually\n * for each path item in the SVG\n * The value of frames will always take the advantage of\n * the duration value.\n * If you fail somewhere, an error will be thrown.\n * Good luck.\n *\n * @constructor\n * @this {Vivus}\n * @param {DOM|String}   element  Dom element of the SVG or id of it\n * @param {Object}       options  Options about the animation\n * @param {Function}     callback Callback for the end of the animation\n */\nfunction Vivus (element, options, callback) {\n\n  // Setup\n  this.isReady = false;\n  this.setElement(element, options);\n  this.setOptions(options);\n  this.setCallback(callback);\n\n  if (this.isReady) {\n    this.init();\n  }\n}\n\n/**\n * Timing functions\n ************************************** \n * \n * Default functions to help developers.\n * It always take a number as parameter (between 0 to 1) then\n * return a number (between 0 and 1)\n */\nVivus.LINEAR          = function (x) {return x;};\nVivus.EASE            = function (x) {return -Math.cos(x * Math.PI) / 2 + 0.5;};\nVivus.EASE_OUT        = function (x) {return 1 - Math.pow(1-x, 3);};\nVivus.EASE_IN         = function (x) {return Math.pow(x, 3);};\nVivus.EASE_OUT_BOUNCE = function (x) {\n  var base = -Math.cos(x * (0.5 * Math.PI)) + 1,\n    rate = Math.pow(base,1.5),\n    rateR = Math.pow(1 - x, 2),\n    progress = -Math.abs(Math.cos(rate * (2.5 * Math.PI) )) + 1;\n  return (1- rateR) + (progress * rateR);\n};\n\n\n/**\n * Setters\n **************************************\n */\n\n/**\n * Check and set the element in the instance\n * The method will not return anything, but will throw an\n * error if the parameter is invalid\n *\n * @param {DOM|String}   element  SVG Dom element or id of it\n */\nVivus.prototype.setElement = function (element, options) {\n  // Basic check\n  if (typeof element === 'undefined') {\n    throw new Error('Vivus [constructor]: \"element\" parameter is required');\n  }\n\n  // Set the element\n  if (element.constructor === String) {\n    element = document.getElementById(element);\n    if (!element) {\n      throw new Error('Vivus [constructor]: \"element\" parameter is not related to an existing ID');\n    }\n  }\n  this.parentEl = element;\n\n  // Create the object element if the property `file` exists in the options object\n  if (options && options.file) {\n    var objElm = document.createElement('object');\n    objElm.setAttribute('type', 'image/svg+xml');\n    objElm.setAttribute('data', options.file);\n    objElm.setAttribute('built-by-vivus', 'true');\n    element.appendChild(objElm);\n    element = objElm;\n  }\n\n  switch (element.constructor) {\n  case window.SVGSVGElement:\n  case window.SVGElement:\n    this.el = element;\n    this.isReady = true;\n    break;\n\n  case window.HTMLObjectElement:\n    // If we have to wait for it\n    var onLoad, self;\n    \n    self = this;\n    onLoad = function (e) {\n      if (self.isReady) {\n        return;\n      }\n      self.el = element.contentDocument && element.contentDocument.querySelector('svg');\n      if (!self.el && e) {\n        throw new Error('Vivus [constructor]: object loaded does not contain any SVG');\n      }\n      else if (self.el) {\n        if (element.getAttribute('built-by-vivus')) {\n          self.parentEl.insertBefore(self.el, element);\n          self.parentEl.removeChild(element);\n          self.el.setAttribute('width', '100%');\n          self.el.setAttribute('height', '100%');\n        }\n        self.isReady = true;\n        self.init();\n        return true;\n      }\n    };\n\n    if (!onLoad()) {\n      element.addEventListener('load', onLoad);\n    }\n    break;\n\n  default:\n    throw new Error('Vivus [constructor]: \"element\" parameter is not valid (or miss the \"file\" attribute)');\n  }\n};\n\n/**\n * Set up user option to the instance\n * The method will not return anything, but will throw an\n * error if the parameter is invalid\n *\n * @param  {object} options Object from the constructor\n */\nVivus.prototype.setOptions = function (options) {\n  var allowedTypes = ['delayed', 'async', 'oneByOne', 'scenario', 'scenario-sync'];\n  var allowedStarts =  ['inViewport', 'manual', 'autostart'];\n\n  // Basic check\n  if (options !== undefined && options.constructor !== Object) {\n    throw new Error('Vivus [constructor]: \"options\" parameter must be an object');\n  }\n  else {\n    options = options || {};\n  }\n\n  // Set the animation type\n  if (options.type && allowedTypes.indexOf(options.type) === -1) {\n    throw new Error('Vivus [constructor]: ' + options.type + ' is not an existing animation `type`');\n  }\n  else {\n    this.type = options.type || allowedTypes[0];\n  }\n\n  // Set the start type\n  if (options.start && allowedStarts.indexOf(options.start) === -1) {\n    throw new Error('Vivus [constructor]: ' + options.start + ' is not an existing `start` option');\n  }\n  else {\n    this.start = options.start || allowedStarts[0];\n  }\n\n  this.isIE        = (window.navigator.userAgent.indexOf('MSIE') !== -1 || window.navigator.userAgent.indexOf('Trident/') !== -1 || window.navigator.userAgent.indexOf('Edge/') !== -1 );\n  this.duration    = parsePositiveInt(options.duration, 120);\n  this.delay       = parsePositiveInt(options.delay, null);\n  this.dashGap     = parsePositiveInt(options.dashGap, 1);\n  this.forceRender = options.hasOwnProperty('forceRender') ? !!options.forceRender : this.isIE;\n  this.selfDestroy = !!options.selfDestroy;\n  this.onReady     = options.onReady;\n  this.frameLength = this.currentFrame = this.map = this.delayUnit = this.speed = this.handle = null;\n\n  this.ignoreInvisible = options.hasOwnProperty('ignoreInvisible') ? !!options.ignoreInvisible : false;\n\n  this.animTimingFunction = options.animTimingFunction || Vivus.LINEAR;\n  this.pathTimingFunction = options.pathTimingFunction || Vivus.LINEAR;\n\n  if (this.delay >= this.duration) {\n    throw new Error('Vivus [constructor]: delay must be shorter than duration');\n  }\n};\n\n/**\n * Set up callback to the instance\n * The method will not return enything, but will throw an\n * error if the parameter is invalid\n *\n * @param  {Function} callback Callback for the animation end\n */\nVivus.prototype.setCallback = function (callback) {\n  // Basic check\n  if (!!callback && callback.constructor !== Function) {\n    throw new Error('Vivus [constructor]: \"callback\" parameter must be a function');\n  }\n  this.callback = callback || function () {};\n};\n\n\n/**\n * Core\n **************************************\n */\n\n/**\n * Map the svg, path by path.\n * The method return nothing, it just fill the\n * `map` array. Each item in this array represent\n * a path element from the SVG, with informations for\n * the animation.\n *\n * ```\n * [\n *   {\n *     el: <DOMobj> the path element\n *     length: <number> length of the path line\n *     startAt: <number> time start of the path animation (in frames)\n *     duration: <number> path animation duration (in frames)\n *   },\n *   ...\n * ]\n * ```\n *\n */\nVivus.prototype.mapping = function () {\n  var i, paths, path, pAttrs, pathObj, totalLength, lengthMeter, timePoint;\n  timePoint = totalLength = lengthMeter = 0;\n  paths = this.el.querySelectorAll('path');\n\n  for (i = 0; i < paths.length; i++) {\n    path = paths[i];\n    if (this.isInvisible(path)) {\n      continue;\n    }\n    pathObj = {\n      el: path,\n      length: Math.ceil(path.getTotalLength())\n    };\n    // Test if the path length is correct\n    if (isNaN(pathObj.length)) {\n      if (window.console && console.warn) {\n        console.warn('Vivus [mapping]: cannot retrieve a path element length', path);\n      }\n      continue;\n    }\n    this.map.push(pathObj);\n    path.style.strokeDasharray  = pathObj.length + ' ' + (pathObj.length + this.dashGap * 2);\n    path.style.strokeDashoffset = pathObj.length + this.dashGap;\n    pathObj.length += this.dashGap;\n    totalLength += pathObj.length;\n\n    this.renderPath(i);\n  }\n\n  totalLength = totalLength === 0 ? 1 : totalLength;\n  this.delay = this.delay === null ? this.duration / 3 : this.delay;\n  this.delayUnit = this.delay / (paths.length > 1 ? paths.length - 1 : 1);\n\n  for (i = 0; i < this.map.length; i++) {\n    pathObj = this.map[i];\n\n    switch (this.type) {\n    case 'delayed':\n      pathObj.startAt = this.delayUnit * i;\n      pathObj.duration = this.duration - this.delay;\n      break;\n\n    case 'oneByOne':\n      pathObj.startAt = lengthMeter / totalLength * this.duration;\n      pathObj.duration = pathObj.length / totalLength * this.duration;\n      break;\n\n    case 'async':\n      pathObj.startAt = 0;\n      pathObj.duration = this.duration;\n      break;\n\n    case 'scenario-sync':\n      path = paths[i];\n      pAttrs = this.parseAttr(path);\n      pathObj.startAt = timePoint + (parsePositiveInt(pAttrs['data-delay'], this.delayUnit) || 0);\n      pathObj.duration = parsePositiveInt(pAttrs['data-duration'], this.duration);\n      timePoint = pAttrs['data-async'] !== undefined ? pathObj.startAt : pathObj.startAt + pathObj.duration;\n      this.frameLength = Math.max(this.frameLength, (pathObj.startAt + pathObj.duration));\n      break;\n\n    case 'scenario':\n      path = paths[i];\n      pAttrs = this.parseAttr(path);\n      pathObj.startAt = parsePositiveInt(pAttrs['data-start'], this.delayUnit) || 0;\n      pathObj.duration = parsePositiveInt(pAttrs['data-duration'], this.duration);\n      this.frameLength = Math.max(this.frameLength, (pathObj.startAt + pathObj.duration));\n      break;\n    }\n    lengthMeter += pathObj.length;\n    this.frameLength = this.frameLength || this.duration;\n  }\n};\n\n/**\n * Interval method to draw the SVG from current\n * position of the animation. It update the value of\n * `currentFrame` and re-trace the SVG.\n *\n * It use this.handle to store the requestAnimationFrame\n * and clear it one the animation is stopped. So this\n * attribute can be used to know if the animation is\n * playing.\n *\n * Once the animation at the end, this method will\n * trigger the Vivus callback.\n *\n */\nVivus.prototype.drawer = function () {\n  var self = this;\n  this.currentFrame += this.speed;\n\n  if (this.currentFrame <= 0) {\n    this.stop();\n    this.reset();\n    this.callback(this);\n  } else if (this.currentFrame >= this.frameLength) {\n    this.stop();\n    this.currentFrame = this.frameLength;\n    this.trace();\n    if (this.selfDestroy) {\n      this.destroy();\n    }\n    this.callback(this);\n  } else {\n    this.trace();\n    this.handle = requestAnimFrame(function () {\n      self.drawer();\n    });\n  }\n};\n\n/**\n * Draw the SVG at the current instant from the\n * `currentFrame` value. Here is where most of the magic is.\n * The trick is to use the `strokeDashoffset` style property.\n *\n * For optimisation reasons, a new property called `progress`\n * is added in each item of `map`. This one contain the current\n * progress of the path element. Only if the new value is different\n * the new value will be applied to the DOM element. This\n * method save a lot of resources to re-render the SVG. And could\n * be improved if the animation couldn't be played forward.\n *\n */\nVivus.prototype.trace = function () {\n  var i, progress, path, currentFrame;\n  currentFrame = this.animTimingFunction(this.currentFrame / this.frameLength) * this.frameLength;\n  for (i = 0; i < this.map.length; i++) {\n    path = this.map[i];\n    progress = (currentFrame - path.startAt) / path.duration;\n    progress = this.pathTimingFunction(Math.max(0, Math.min(1, progress)));\n    if (path.progress !== progress) {\n      path.progress = progress;\n      path.el.style.strokeDashoffset = Math.floor(path.length * (1 - progress));\n      this.renderPath(i);\n    }\n  }\n};\n\n/**\n * Method forcing the browser to re-render a path element\n * from it's index in the map. Depending on the `forceRender`\n * value.\n * The trick is to replace the path element by it's clone.\n * This practice is not recommended because it's asking more\n * ressources, too much DOM manupulation..\n * but it's the only way to let the magic happen on IE.\n * By default, this fallback is only applied on IE.\n * \n * @param  {Number} index Path index\n */\nVivus.prototype.renderPath = function (index) {\n  if (this.forceRender && this.map && this.map[index]) {\n    var pathObj = this.map[index],\n        newPath = pathObj.el.cloneNode(true);\n    pathObj.el.parentNode.replaceChild(newPath, pathObj.el);\n    pathObj.el = newPath;\n  }\n};\n\n/**\n * When the SVG object is loaded and ready,\n * this method will continue the initialisation.\n *\n * This this mainly due to the case of passing an\n * object tag in the constructor. It will wait\n * the end of the loading to initialise.\n * \n */\nVivus.prototype.init = function () {\n  // Set object variables\n  this.frameLength = 0;\n  this.currentFrame = 0;\n  this.map = [];\n\n  // Start\n  new Pathformer(this.el);\n  this.mapping();\n  this.starter();\n\n  if (this.onReady) {\n    this.onReady(this);\n  }\n};\n\n/**\n * Trigger to start of the animation.\n * Depending on the `start` value, a different script\n * will be applied.\n *\n * If the `start` value is not valid, an error will be thrown.\n * Even if technically, this is impossible.\n *\n */\nVivus.prototype.starter = function () {\n  switch (this.start) {\n  case 'manual':\n    return;\n\n  case 'autostart':\n    this.play();\n    break;\n\n  case 'inViewport':\n    var self = this,\n    listener = function () {\n      if (self.isInViewport(self.parentEl, 1)) {\n        self.play();\n        window.removeEventListener('scroll', listener);\n      }\n    };\n    window.addEventListener('scroll', listener);\n    listener();\n    break;\n  }\n};\n\n\n/**\n * Controls\n **************************************\n */\n\n/**\n * Get the current status of the animation between\n * three different states: 'start', 'progress', 'end'.\n * @return {string} Instance status\n */\nVivus.prototype.getStatus = function () {\n  return this.currentFrame === 0 ? 'start' : this.currentFrame === this.frameLength ? 'end' : 'progress';\n};\n\n/**\n * Reset the instance to the initial state : undraw\n * Be careful, it just reset the animation, if you're\n * playing the animation, this won't stop it. But just\n * make it start from start.\n *\n */\nVivus.prototype.reset = function () {\n  return this.setFrameProgress(0);\n};\n\n/**\n * Set the instance to the final state : drawn\n * Be careful, it just set the animation, if you're\n * playing the animation on rewind, this won't stop it.\n * But just make it start from the end.\n *\n */\nVivus.prototype.finish = function () {\n  return this.setFrameProgress(1);\n};\n\n/**\n * Set the level of progress of the drawing.\n * \n * @param {number} progress Level of progress to set\n */\nVivus.prototype.setFrameProgress = function (progress) {\n  progress = Math.min(1, Math.max(0, progress));\n  this.currentFrame = Math.round(this.frameLength * progress);\n  this.trace();\n  return this;\n};\n\n/**\n * Play the animation at the desired speed.\n * Speed must be a valid number (no zero).\n * By default, the speed value is 1.\n * But a negative value is accepted to go forward.\n *\n * And works with float too.\n * But don't forget we are in JavaScript, se be nice\n * with him and give him a 1/2^x value.\n *\n * @param  {number} speed Animation speed [optional]\n */\nVivus.prototype.play = function (speed) {\n  if (speed && typeof speed !== 'number') {\n    throw new Error('Vivus [play]: invalid speed');\n  }\n  this.speed = speed || 1;\n  if (!this.handle) {\n    this.drawer();\n  }\n  return this;\n};\n\n/**\n * Stop the current animation, if on progress.\n * Should not trigger any error.\n *\n */\nVivus.prototype.stop = function () {\n  if (this.handle) {\n    cancelAnimFrame(this.handle);\n    this.handle = null;\n  }\n  return this;\n};\n\n/**\n * Destroy the instance.\n * Remove all bad styling attributes on all\n * path tags\n *\n */\nVivus.prototype.destroy = function () {\n  var i, path;\n  for (i = 0; i < this.map.length; i++) {\n    path = this.map[i];\n    path.el.style.strokeDashoffset = null;\n    path.el.style.strokeDasharray = null;\n    this.renderPath(i);\n  }\n};\n\n\n/**\n * Utils methods\n * include methods from Codrops\n **************************************\n */\n\n/**\n * Method to best guess if a path should added into\n * the animation or not.\n *\n * 1. Use the `data-vivus-ignore` attribute if set\n * 2. Check if the instance must ignore invisible paths\n * 3. Check if the path is visible\n *\n * For now the visibility checking is unstable.\n * It will be used for a beta phase.\n *\n * Other improvments are planned. Like detecting\n * is the path got a stroke or a valid opacity.\n */\nVivus.prototype.isInvisible = function (el) {\n  var rect,\n    ignoreAttr = el.getAttribute('data-ignore');\n\n  if (ignoreAttr !== null) {\n    return ignoreAttr !== 'false';\n  }\n\n  if (this.ignoreInvisible) {\n    rect = el.getBoundingClientRect();\n    return !rect.width && !rect.height;\n  }\n  else {\n    return false;\n  }\n};\n\n/**\n * Parse attributes of a DOM element to\n * get an object of {attributeName => attributeValue}\n *\n * @param  {object} element DOM element to parse\n * @return {object}         Object of attributes\n */\nVivus.prototype.parseAttr = function (element) {\n  var attr, output = {};\n  if (element && element.attributes) {\n    for (var i = 0; i < element.attributes.length; i++) {\n      attr = element.attributes[i];\n      output[attr.name] = attr.value;\n    }\n  }\n  return output;\n};\n\n/**\n * Reply if an element is in the page viewport\n *\n * @param  {object} el Element to observe\n * @param  {number} h  Percentage of height\n * @return {boolean}\n */\nVivus.prototype.isInViewport = function (el, h) {\n  var scrolled   = this.scrollY(),\n    viewed       = scrolled + this.getViewportH(),\n    elBCR        = el.getBoundingClientRect(),\n    elHeight     = elBCR.height,\n    elTop        = scrolled + elBCR.top,\n    elBottom     = elTop + elHeight;\n\n  // if 0, the element is considered in the viewport as soon as it enters.\n  // if 1, the element is considered in the viewport only when it's fully inside\n  // value in percentage (1 >= h >= 0)\n  h = h || 0;\n\n  return (elTop + elHeight * h) <= viewed && (elBottom) >= scrolled;\n};\n\n/**\n * Alias for document element\n *\n * @type {DOMelement}\n */\nVivus.prototype.docElem = window.document.documentElement;\n\n/**\n * Get the viewport height in pixels\n *\n * @return {integer} Viewport height\n */\nVivus.prototype.getViewportH = function () {\n  var client = this.docElem.clientHeight,\n    inner = window.innerHeight;\n\n  if (client < inner) {\n    return inner;\n  }\n  else {\n    return client;\n  }\n};\n\n/**\n * Get the page Y offset\n *\n * @return {integer} Page Y offset\n */\nVivus.prototype.scrollY = function () {\n  return window.pageYOffset || this.docElem.scrollTop;\n};\n\n/**\n * Alias for `requestAnimationFrame` or\n * `setTimeout` function for deprecated browsers.\n *\n */\nrequestAnimFrame = (function () {\n  return (\n    window.requestAnimationFrame       ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame    ||\n    window.oRequestAnimationFrame      ||\n    window.msRequestAnimationFrame     ||\n    function(/* function */ callback){\n      return window.setTimeout(callback, 1000 / 60);\n    }\n  );\n})();\n\n/**\n * Alias for `cancelAnimationFrame` or\n * `cancelTimeout` function for deprecated browsers.\n *\n */\ncancelAnimFrame = (function () {\n  return (\n    window.cancelAnimationFrame       ||\n    window.webkitCancelAnimationFrame ||\n    window.mozCancelAnimationFrame    ||\n    window.oCancelAnimationFrame      ||\n    window.msCancelAnimationFrame     ||\n    function(id){\n      return window.clearTimeout(id);\n    }\n  );\n})();\n\n/**\n * Parse string to integer.\n * If the number is not positive or null\n * the method will return the default value\n * or 0 if undefined\n *\n * @param {string} value String to parse\n * @param {*} defaultValue Value to return if the result parsed is invalid\n * @return {number}\n *\n */\nparsePositiveInt = function (value, defaultValue) {\n  var output = parseInt(value, 10);\n  return (output >= 0) ? output : defaultValue;\n};\n\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function() {\n      return Vivus;\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = Vivus;\n  } else {\n    // Browser globals\n    window.Vivus = Vivus;\n  }\n\n}(window, document));\n"]}